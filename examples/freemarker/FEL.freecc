/* Copyright (c) 2008-2019 Jonathan Revusky, jon@revusky.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notices,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name Jonathan Revusky, FreeCC, Sun Microsystems, Inc.
 *       nor the names of any contributors may be used to endorse or promote
 *       products derived from this software without specific prior written
 *       permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

options {
   TREE_BUILDING_ENABLED=true;
   SMART_NODE_CREATION=true;
   PARSER_PACKAGE="fel";
   BASE_SRC_DIR=".";
   TOKENS_ARE_NODES=true;
   SPECIAL_TOKENS_ARE_NODES=true;
   DEFAULT_LEXICAL_STATE="FTL_EXPRESSION";
}

INJECT(FELParser) :
{}
{
   static public void main(String[] args) throws ParseException {
       FELParser parser = new FELParser(new java.io.InputStreamReader(System.in));
       Node n = parser.Input();
       Nodes.dump(n, "  ");
   }
}

<FTL_EXPRESSION> SKIP :
{
    <EXP_WHITE_SPACE : (" "|"\t"|"\n"|"\r")+>
}

<FTL_EXPRESSION> MORE :
{
    <"<#--"> : EXPRESSION_COMMENT
    |
    <"<!--"> : EXPRESSION_COMMENT
    |
    <"[#--"> : EXPRESSION_COMMENT
}

<EXPRESSION_COMMENT> MORE :
{
    <~[]>
}

<EXPRESSION_COMMENT> SPECIAL_TOKEN :
{
    <"-->"> : FTL_EXPRESSION
    |
    <"--]"> : FTL_EXPRESSION
}

<FTL_EXPRESSION> TOKEN :
{
    <OPEN_PAREN : "(">
    |
    <CLOSE_PAREN : ")">
    |
    <OPEN_BRACKET : "[">
    |
    <CLOSE_BRACKET : "]">
    |
    <OPEN_BRACE : "{">
    |
    <CLOSE_BRACE : "}">
    |
    <EQUALS : "=">
    |
    <DOT : ".">
    |
    <PLUS : "+">
    |
    <MINUS : "-">
    |
    <TIMES : "*">
    |
    <DIVIDE : "/">
    |
    <PERCENT : "%">
    |
    <OR : "|">
    |
    <AND : "&">
    |
    <LT : "<">
    |
    <GT : ">">
    |
    <COMMA : ",">
    |
    <COLON : ":">
    |
    <SEMICOLON : ";">
    |
    <EXCLAM : "!">
    |
    <BUILT_IN : "?">
    |
    <DOUBLE_EQUALS : "==">
    |
    <NOT_EQUALS : "!=">
    |
    <EXISTS_OPERATOR : "??">
    |
    <LTE : "<=">
    |
    <GTE : ">=">
    |
    <OR2 : "||">
    |
    <AND2 : "&&">
    |
    <DOT_DOT : "..">
    |
    <ALT_GT : "gt">
    |
    <ALT_LT : "lt">
    |
    <AS : "as">
    |
    <IN : "in">
    |
    <ALT_GTE : "gte">
    |
    <ALT_LTE : "lte">
    |
    <ELLIPSIS : "...">
    |
    <NULL : "null">
    |
    <TRUE : "true">
    |
    <FALSE : "false">
    |
    <USING : "using">
    |
    <INTEGER : (["0"-"9"])+>
    |
    <DECIMAL : <INTEGER> "." <INTEGER>>
    |
    <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    |
    <#LETTER:
      [
       "\u0024",
       "\u0040"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
   >
   |
   <#DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
   >
   |
   <STRING_LITERAL :
      ("\""
          ((~["\\", "\""]) | ("\\" ~[]))*
      "\"")
      |
      ("'"
          ((~["\\", "'"]) | ("\\" ~[]))*
      "'")
   >
   |
   <RAW_STRING : "r" (("\"" (~["\""])* "\"") | ("'" (~["'"])* "'"))>
}

Node Input() #void :
{}
{
   Expression()
   <EOF>
   {
       return rootNode();
   }
}

void Expression() : {}
{
    OrExpression()
}

void OrExpression() : {}
{
    AndExpression()
    (
        (<OR>|<OR2>) AndExpression()
    )*
}

void AndExpression() : {}
{
    EqualityExpression()
    (
        (<AND>|<AND2>) EqualityExpression()
    )*
}

void EqualityExpression() : {}
{
    RelationalExpression()
    [
        (<EQUALS>|<DOUBLE_EQUALS>|<NOT_EQUALS>)
        RelationalExpression()
    ]
}

void RelationalExpression() : {}
{
    RangeExpression()
    [
        (<GT>|<GTE>|<LT>|<LTE>|<ALT_GT>|<ALT_GTE>|<ALT_LTE>|<ALT_LT>)
        RangeExpression()
    ]
}

void RangeExpression() : {}
{
    AdditiveExpression()
    [
       <DOT_DOT>
       [
         LOOKAHEAD(AdditiveExpression())
          AdditiveExpression()
       ]
    ]
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression()
    (
        LOOKAHEAD(<PLUS>|<MINUS>)
           (<PLUS>|<MINUS>)
           MultiplicativeExpression()
    )*
}

void MultiplicativeExpression() : {}
{
    UnaryExpression()
    (
          (<TIMES>|<DIVIDE>|<PERCENT>)
          UnaryExpression()
    )*
}


void UnaryExpression() #void : {}
{
    UnaryPlusMinusExpression()
    |
    NotExpression()
    |
    DefaultToExpression()
}

void UnaryPlusMinusExpression() : {}
{
    (<PLUS>|<MINUS>) DefaultToExpression()
}

void NotExpression() : {}
{
    <EXCLAM>
    DefaultToExpression()
}

void BuiltinVariable() : {}
{
    <DOT><IDENTIFIER>
}

void DefaultToExpression() : {}
{
    PrimaryExpression()
    (
        LOOKAHEAD(<EXCLAM>BaseExpression(), {getToken(2).kind !=IDENTIFIER || getToken(3).kind != EQUALS})
        <EXCLAM>PrimaryExpression()
    )*
    [
      LOOKAHEAD(1) //This seems to be necessary to prevent a warning, but it seems like maybe this is a bug.
       <EXCLAM>
    ]
}

void PrimaryExpression() : {}
{
  BaseExpression()
  (
    LOOKAHEAD(<DOT>|<OPEN_BRACKET>|<OPEN_PAREN>|<BUILT_IN>|<EXISTS_OPERATOR>)
    (
      DotKey()
      |
      DynamicKey()
      |
      MethodInvoke()
      |
      BuiltIn()
      |
      Exists()
    )
  )*
}

void BaseExpression() : {}
{
    <IDENTIFIER>
    |
    NumberLiteral()
    |
    HashLiteral()
    |
    StringLiteral()
    |
    BooleanLiteral()
    |
    NullLiteral()
    |
    ListLiteral()
    |
    Parenthesis()
    |
    BuiltinVariable()
}


void DotKey() #void : {}
{
    <DOT>
    (<IDENTIFIER>|<TIMES>)
}

void DynamicKey() #void : {}
{
    <OPEN_BRACKET>Expression()<CLOSE_BRACKET>

}

void MethodInvoke() #void : {}
{
  <OPEN_PAREN>[ArgsList()]<CLOSE_PAREN>
}

void BuiltIn() #void : {}
{
    <BUILT_IN><IDENTIFIER>
}

void Exists() : {}
{
    <EXISTS_OPERATOR>
}

void ListLiteral() : {}
{
    <OPEN_BRACKET>
    [Expression() ([<COMMA>]Expression())*]
    <CLOSE_BRACKET>
}

void StringLiteral() : {}
{
    <STRING_LITERAL>|<RAW_STRING>
}


void HashLiteral() : {}
{
    <OPEN_BRACE>
    [
       Expression() <COLON> Expression()
       (<COMMA>Expression()<COLON>Expression())*
    ]
    <CLOSE_BRACE>
}

void NumberLiteral() : {}
{
    <INTEGER>|<DECIMAL>
}

void BooleanLiteral() : {}
{
    <TRUE>|<FALSE>
}

void NullLiteral() : {}
{
    <NULL>
}

void Parenthesis() : {}
{
    <OPEN_PAREN>Expression()<CLOSE_PAREN>
}

void ArgsList() #void : {}
{
    (
        LOOKAHEAD(<IDENTIFIER><EQUALS>)
        NamedArgsList()
        |
        PositionalArgsList()
    )
}

void NamedArgsList() : {}
{
    <IDENTIFIER>
    <EQUALS>
    Expression()
    (
       [<COMMA>]
       <IDENTIFIER>
       <EQUALS>
       Expression()
    )*
}

void PositionalArgsList() : {}
{
    Expression()
    (
       [<COMMA>]
       Expression()
    )*
}

